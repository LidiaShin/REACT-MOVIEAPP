{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","PropTypes","string","isRequired","Movie","_ref","genres","synopsis","ClassName","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","console","log","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","sweetpotato","json","data","catch","err","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2VA8CA,SAASA,EAATC,GAAkC,IAAZC,EAAYD,EAAZC,OAAOC,EAAKF,EAALE,IACzB,OACAC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAW,iBAKvD,SAASC,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACjB,OACCR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,eAAeG,GAcjCZ,EAAYa,UAAU,CAClBX,OAAOW,IAAUC,OAAOC,WACxBZ,IAAIU,IAAUC,OAAOC,YAGzBL,EAAWG,UAAU,CACjBD,MAAMC,IAAUC,OAAOC,YAOfC,MA5Ef,SAAAC,GAA8C,IAA9BT,EAA8BS,EAA9BT,MAAMN,EAAwBe,EAAxBf,OAAOgB,EAAiBD,EAAjBC,OAAOC,EAAUF,EAAVE,SACpC,OACIf,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SAEZL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACdL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAIlCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAAA,UAAKE,GAELJ,EAAAC,EAAAC,cAAA,OAAKc,UAAU,eACdF,EAAOG,IAAI,SAACT,EAAMU,GAAP,OAAiBlB,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOW,IAAKD,OAG5DlB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBAEdL,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,CACAoB,KAAMN,EACNO,QAAQ,IACRC,SAAS,OACTC,WAAS,EACTC,QAAQ,gBC8BNC,6MAnDfC,MAAM,KAONC,cAAc,WAWZ,OAVeC,EAAKF,MAAMG,OAAOb,IAAI,SAACc,EAAMb,GAE1C,OADAc,QAAQC,IAAIF,GACL/B,EAAAC,EAAAC,cAACgC,EAAD,CAAO9B,MAAO2B,EAAMI,cACbrC,OAAQiC,EAAMK,mBACdjB,IAAKY,EAAMM,GACXvB,OAAQiB,EAAMjB,OACdC,SAAUgB,EAAMhB,gBAQlCuB,gCAAY,SAAAC,IAAA,IAAAT,EAAA,OAAAU,EAAAvC,EAAAwC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACWf,EAAKgB,WADhB,OACJf,EADIY,EAAAI,KAEVjB,EAAKkB,SAAS,CACZjB,WAHQ,wBAAAY,EAAAM,SAAAT,EAAAU,WAOZJ,SAAS,WACP,OAAOK,MAAM,yDACZC,KAAK,SAAAC,GAAW,OAAEA,EAAYC,SAC9BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKxB,SACvByB,MAAM,SAAAC,GAAG,OAAGxB,QAAQC,IAAIuB,yFA7BzBP,KAAKX,8CAgCE,IACAR,EAAUmB,KAAKtB,MAAfG,OACL,OACA9B,EAAAC,EAAAC,cAAA,OAAKG,UAAWyB,EAAS,MAAQ,gBAChCmB,KAAKtB,MAAMG,OAAQmB,KAAKrB,gBAAiB,mBA3C5B6B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.ef4c4c3e.chunk.js","sourcesContent":[" // eslint-disable-next-line \r\nimport React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './movie.css';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\n\r\nfunction Movie({title,poster,genres,synopsis}){\r\nreturn(\r\n    <div className=\"Movie\">\r\n\r\n       <div className=\"Movie_Columns\">\r\n        <MoviePoster poster={poster} alt={title} />\r\n        </div>\r\n\r\n\r\n        <div className=\"Movie_Columns\">        \r\n            <h1>{title}</h1>  \r\n\r\n            <div ClassName=\"Movie_Genre\">\r\n            {genres.map((genre,index) => <MovieGenre genre={genre} key={index} />   )}          \r\n            </div>\r\n\r\n            <div className=\"Movie_Synopsis\">\r\n\r\n             <LinesEllipsis\r\n             text={synopsis}\r\n             maxLine='3'\r\n             ellipsis=' ...'\r\n             trimRight\r\n             basedOn='letters'\r\n             />\r\n\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction MoviePoster({poster,alt}){\r\n    return(\r\n    <img src={poster} alt={alt} title={alt} className =\"Movie_Poster\"  />\r\n    )\r\n}\r\n\r\n\r\nfunction MovieGenre({genre}){\r\n    return(\r\n     <span className=\"Movie_Genre\">{genre}</span>\r\n    )\r\n}\r\n\r\n\r\n\r\n    Movie.propTypes={\r\n    title:PropTypes.string.isRequired,\r\n    poster:PropTypes.string.isRequired,\r\n    genres:PropTypes.array.isRequired,\r\n    synopsis:PropTypes.string.isRequied\r\n   }\r\n\r\n\r\n   MoviePoster.PropTypes={\r\n       poster:PropTypes.string.isRequired,\r\n       alt:PropTypes.string.isRequired\r\n   }\r\n\r\n   MovieGenre.PropTypes={\r\n       genre:PropTypes.string.isRequired\r\n   }\r\n\r\n\r\n\r\n\r\n\r\nexport default Movie","import React, { Component } from 'react';\n\nimport './App.css';\nimport Movie from './Movie';\n\nclass App extends Component {\n\n\nstate={}\n\n\ncomponentDidMount(){\n  this._getMovies();\n}\n\n_renderMovies=()=>{\n  const movies = this.state.movies.map((movie,index)=>{\n    console.log(movie)\n    return <Movie title={movie.title_english}\n                  poster={movie.medium_cover_image} \n                  key={movie.id}\n                  genres={movie.genres}\n                  synopsis={movie.synopsis}\n    />\n  })\n  \n  return movies\n}\n\n\n_getMovies= async()=>{\n  const movies = await this._callApi()\n  this.setState({\n    movies\n  })\n}\n\n_callApi=()=>{\n  return fetch('https://yts.am/api/v2/list_movies.json?sort_by=rating')\n  .then(sweetpotato=>sweetpotato.json())\n  .then(json => json.data.movies)\n  .catch(err =>console.log(err))\n}\n\nrender() {\n   const{movies} = this.state;\n    return (\n    <div className={movies ? \"App\" : \"App--loading\"}>  \n    {this.state.movies? this._renderMovies(): 'Loading!'} \n     </div>\n    )\n   }\n  }\n  \n\n  \n\n\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}